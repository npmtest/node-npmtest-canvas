{"/home/travis/build/npmtest/node-npmtest-canvas/test.js":"/* istanbul instrument in package npmtest_canvas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-canvas/lib.npmtest_canvas.js":"/* istanbul instrument in package npmtest_canvas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_canvas = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_canvas = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-canvas/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-canvas && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_canvas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_canvas\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_canvas.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_canvas.rollup.js'] =\n            local.assetsDict['/assets.npmtest_canvas.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_canvas.__dirname + '/lib.npmtest_canvas.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/canvas.js":"'use strict';\n\n/*!\n * Canvas\n * Copyright (c) 2010 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar canvas = require('./bindings')\n  , Canvas = canvas.Canvas\n  , Image = canvas.Image\n  , cairoVersion = canvas.cairoVersion\n  , Context2d = require('./context2d')\n  , PNGStream = require('./pngstream')\n  , PDFStream = require('./pdfstream')\n  , JPEGStream = require('./jpegstream')\n  , FontFace = canvas.FontFace\n  , fs = require('fs')\n  , packageJson = require(\"../package.json\")\n  , FORMATS = ['image/png', 'image/jpeg'];\n\n/**\n * Export `Canvas` as the module.\n */\n\nvar Canvas = exports = module.exports = Canvas;\n\n/**\n * Library version.\n */\n\nexports.version = packageJson.version;\n\n/**\n * Cairo version.\n */\n\nexports.cairoVersion = cairoVersion;\n\n/**\n * jpeglib version.\n */\n\nif (canvas.jpegVersion) {\n  exports.jpegVersion = canvas.jpegVersion;\n}\n\n/**\n * gif_lib version.\n */\n\nif (canvas.gifVersion) {\n  exports.gifVersion = canvas.gifVersion.replace(/[^.\\d]/g, '');\n}\n\n/**\n * freetype version.\n */\n\nif (canvas.freetypeVersion) {\n  exports.freetypeVersion = canvas.freetypeVersion;\n}\n\n/**\n * Expose constructors.\n */\n\nexports.Context2d = Context2d;\nexports.PNGStream = PNGStream;\nexports.PDFStream = PDFStream;\nexports.JPEGStream = JPEGStream;\nexports.Image = Image;\nexports.ImageData = canvas.ImageData;\n\nif (FontFace) {\n  var Font = function Font(name, path, idx) {\n    this.name = name;\n    this._faces = {};\n\n    this.addFace(path, 'normal', 'normal', idx);\n  };\n\n  Font.prototype.addFace = function(path, weight, style, idx) {\n    style = style || 'normal';\n    weight = weight || 'normal';\n\n    var face = new FontFace(path, idx || 0);\n    this._faces[weight + '-' + style] = face;\n  };\n\n  Font.prototype.getFace = function(weightStyle) {\n    return this._faces[weightStyle] || this._faces['normal-normal'];\n  };\n\n  exports.Font = Font;\n}\n\n/**\n * Context2d implementation.\n */\n\nrequire('./context2d');\n\n/**\n * Image implementation.\n */\n\nrequire('./image');\n\n/**\n * Inspect canvas.\n *\n * @return {String}\n * @api public\n */\n\nCanvas.prototype.inspect = function(){\n  return '[Canvas ' + this.width + 'x' + this.height + ']';\n};\n\n/**\n * Get a context object.\n *\n * @param {String} contextId\n * @return {Context2d}\n * @api public\n */\n\nCanvas.prototype.getContext = function(contextId){\n  if ('2d' == contextId) {\n    var ctx = this._context2d || (this._context2d = new Context2d(this));\n    this.context = ctx;\n    ctx.canvas = this;\n    return ctx;\n  }\n};\n\n/**\n * Create a `PNGStream` for `this` canvas.\n *\n * @return {PNGStream}\n * @api public\n */\n\nCanvas.prototype.pngStream =\nCanvas.prototype.createPNGStream = function(){\n  return new PNGStream(this);\n};\n\n/**\n * Create a synchronous `PNGStream` for `this` canvas.\n *\n * @return {PNGStream}\n * @api public\n */\n\nCanvas.prototype.syncPNGStream =\nCanvas.prototype.createSyncPNGStream = function(){\n  return new PNGStream(this, true);\n};\n\n/**\n * Create a `PDFStream` for `this` canvas.\n *\n * @return {PDFStream}\n * @api public\n */\n\nCanvas.prototype.pdfStream =\nCanvas.prototype.createPDFStream = function(){\n  return new PDFStream(this);\n};\n\n/**\n * Create a synchronous `PDFStream` for `this` canvas.\n *\n * @return {PDFStream}\n * @api public\n */\n\nCanvas.prototype.syncPDFStream =\nCanvas.prototype.createSyncPDFStream = function(){\n  return new PDFStream(this, true);\n};\n\n/**\n * Create a `JPEGStream` for `this` canvas.\n *\n * @param {Object} options\n * @return {JPEGStream}\n * @api public\n */\n\nCanvas.prototype.jpegStream =\nCanvas.prototype.createJPEGStream = function(options){\n  return this.createSyncJPEGStream(options);\n};\n\n/**\n * Create a synchronous `JPEGStream` for `this` canvas.\n *\n * @param {Object} options\n * @return {JPEGStream}\n * @api public\n */\n\nCanvas.prototype.syncJPEGStream =\nCanvas.prototype.createSyncJPEGStream = function(options){\n  options = options || {};\n  // Don't allow the buffer size to exceed the size of the canvas (#674)\n  var maxBufSize = this.width * this.height * 4;\n  var clampedBufSize = Math.min(options.bufsize || 4096, maxBufSize);\n  return new JPEGStream(this, {\n      bufsize: clampedBufSize\n    , quality: options.quality || 75\n    , progressive: options.progressive || false\n  });\n};\n\n/**\n * Return a data url. Pass a function for async support (required for \"image/jpeg\").\n *\n * @param {String} type, optional, one of \"image/png\" or \"image/jpeg\", defaults to \"image/png\"\n * @param {Object|Number} encoderOptions, optional, options for jpeg compression (see documentation for Canvas#jpegStream) or the JPEG encoding quality from 0 to 1.\n * @param {Function} fn, optional, callback for asynchronous operation. Required for type \"image/jpeg\".\n * @return {String} data URL if synchronous (callback omitted)\n * @api public\n */\n\nCanvas.prototype.toDataURL = function(a1, a2, a3){\n  // valid arg patterns (args -> [type, opts, fn]):\n  // [] -> ['image/png', null, null]\n  // [qual] -> ['image/png', null, null]\n  // [undefined] -> ['image/png', null, null]\n  // ['image/png'] -> ['image/png', null, null]\n  // ['image/png', qual] -> ['image/png', null, null]\n  // [fn] -> ['image/png', null, fn]\n  // [type, fn] -> [type, null, fn]\n  // [undefined, fn] -> ['image/png', null, fn]\n  // ['image/png', qual, fn] -> ['image/png', null, fn]\n  // ['image/jpeg', fn] -> ['image/jpeg', null, fn]\n  // ['image/jpeg', opts, fn] -> ['image/jpeg', opts, fn]\n  // ['image/jpeg', qual, fn] -> ['image/jpeg', {quality: qual}, fn]\n  // ['image/jpeg', undefined, fn] -> ['image/jpeg', null, fn]\n\n  var type = 'image/png';\n  var opts = {};\n  var fn;\n\n  if ('function' === typeof a1) {\n    fn = a1;\n  } else {\n    if ('string' === typeof a1 && FORMATS.indexOf(a1.toLowerCase()) !== -1) {\n      type = a1.toLowerCase();\n    }\n\n    if ('function' === typeof a2) {\n      fn = a2;\n    } else {\n      if ('object' === typeof a2) {\n        opts = a2;\n      } else if ('number' === typeof a2) {\n        opts = {quality: Math.max(0, Math.min(1, a2)) * 100};\n      }\n\n      if ('function' === typeof a3) {\n        fn = a3;\n      } else if (undefined !== a3) {\n        throw new TypeError(typeof a3 + ' is not a function');\n      }\n    }\n  }\n\n  if (this.width === 0 || this.height === 0) {\n    // Per spec, if the bitmap has no pixels, return this string:\n    var str = \"data:,\";\n    if (fn) {\n      setTimeout(function() {\n        fn(null, str);\n      });\n    }\n    return str;\n  }\n\n  if ('image/png' === type) {\n    if (fn) {\n      this.toBuffer(function(err, buf){\n        if (err) return fn(err);\n        fn(null, 'data:image/png;base64,' + buf.toString('base64'));\n      });\n    } else {\n      return 'data:image/png;base64,' + this.toBuffer().toString('base64');\n    }\n\n  } else if ('image/jpeg' === type) {\n    if (undefined === fn) {\n      throw new Error('Missing required callback function for format \"image/jpeg\"');\n    }\n\n    var stream = this.jpegStream(opts);\n    // note that jpegStream is synchronous\n    var buffers = [];\n    stream.on('data', function (chunk) {\n      buffers.push(chunk);\n    });\n    stream.on('error', function (err) {\n      fn(err);\n    });\n    stream.on('end', function() {\n      var result = 'data:image/jpeg;base64,' + Buffer.concat(buffers).toString('base64');\n      fn(null, result);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/bindings.js":"'use strict';\n\nmodule.exports = require('../build/Release/canvas');\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/index.js":"module.exports = require('./lib/canvas');","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/context2d.js":"'use strict';\n\n/*!\n * Canvas - Context2d\n * Copyright (c) 2010 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar canvas = require('./bindings')\n  , Context2d = canvas.CanvasRenderingContext2d\n  , CanvasGradient = canvas.CanvasGradient\n  , CanvasPattern = canvas.CanvasPattern\n  , ImageData = canvas.ImageData;\n\nvar parseCssFont = require('parse-css-font');\n\nvar unitsCss = require('units-css');\n\n/**\n * Export `Context2d` as the module.\n */\n\nvar Context2d = exports = module.exports = Context2d;\n\n/**\n * Cache color string RGBA values.\n */\n\nvar cache = {};\n\n/**\n * Text baselines.\n */\n\nvar baselines = ['alphabetic', 'top', 'bottom', 'middle', 'ideographic', 'hanging'];\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nvar parseFont = exports.parseFont = function(str) {\n  var parsedFont;\n\n  // Try to parse the font string using parse-css-font.\n  // It will throw an exception if it fails.\n  try {\n    parsedFont = parseCssFont(str);\n  }\n  catch (e) {\n    // Invalid\n    return;\n  }\n\n  // Cached\n  if (cache[str]) return cache[str];\n\n  // Parse size into value and unit using units-css\n  var size = unitsCss.parse(parsedFont.size);\n\n  // TODO: dpi\n  // TODO: remaining unit conversion\n  switch (size.unit) {\n    case 'pt':\n      size.value /= .75;\n      break;\n    case 'in':\n      size.value *= 96;\n      break;\n    case 'mm':\n      size.value *= 96.0 / 25.4;\n      break;\n    case 'cm':\n      size.value *= 96.0 / 2.54;\n      break;\n  }\n\n  // Populate font object\n  var font = {\n    weight: parsedFont.weight,\n    style: parsedFont.style,\n    size: size.value,\n    unit: size.unit,\n    family: parsedFont.family[0]\n  };\n\n  return cache[str] = font;\n};\n\n/**\n * Enable or disable image smoothing.\n *\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('imageSmoothingEnabled', function(val){\n  this._imageSmoothing = !! val;\n  this.patternQuality = val ? 'best' : 'fast';\n});\n\n/**\n * Get image smoothing value.\n *\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('imageSmoothingEnabled', function(val){\n  return !! this._imageSmoothing;\n});\n\n/**\n * Create a pattern from `Image` or `Canvas`.\n *\n * @param {Image|Canvas} image\n * @param {String} repetition\n * @return {CanvasPattern}\n * @api public\n */\n\nContext2d.prototype.createPattern = function(image, repetition){\n  // TODO Use repetition (currently always 'repeat')\n  return new CanvasPattern(image);\n};\n\n/**\n * Create a linear gradient at the given point `(x0, y0)` and `(x1, y1)`.\n *\n * @param {Number} x0\n * @param {Number} y0\n * @param {Number} x1\n * @param {Number} y1\n * @return {CanvasGradient}\n * @api public\n */\n\nContext2d.prototype.createLinearGradient = function(x0, y0, x1, y1){\n  return new CanvasGradient(x0, y0, x1, y1);\n};\n\n/**\n * Create a radial gradient at the given point `(x0, y0)` and `(x1, y1)`\n * and radius `r0` and `r1`.\n *\n * @param {Number} x0\n * @param {Number} y0\n * @param {Number} r0\n * @param {Number} x1\n * @param {Number} y1\n * @param {Number} r1\n * @return {CanvasGradient}\n * @api public\n */\n\nContext2d.prototype.createRadialGradient = function(x0, y0, r0, x1, y1, r1){\n  return new CanvasGradient(x0, y0, r0, x1, y1, r1);\n};\n\n/**\n * Reset transform matrix to identity, then apply the given args.\n *\n * @param {...}\n * @api public\n */\n\nContext2d.prototype.setTransform = function(){\n  this.resetTransform();\n  this.transform.apply(this, arguments);\n};\n\n/**\n * Set the fill style with the given css color string.\n *\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('fillStyle', function(val){\n  if (!val) return;\n  if ('CanvasGradient' == val.constructor.name\n    || 'CanvasPattern' == val.constructor.name) {\n    this.lastFillStyle = val;\n    this._setFillPattern(val);\n  } else if ('string' == typeof val) {\n    this._setFillColor(val);\n  }\n});\n\n/**\n * Get previous fill style.\n *\n * @return {CanvasGradient|String}\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('fillStyle', function(){\n  return this.lastFillStyle || this.fillColor;\n});\n\n/**\n * Set the stroke style with the given css color string.\n *\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('strokeStyle', function(val){\n  if (!val) return;\n  if ('CanvasGradient' == val.constructor.name\n    || 'CanvasPattern' == val.constructor.name) {\n    this.lastStrokeStyle = val;\n    this._setStrokePattern(val);\n  } else if ('string' == typeof val) {\n    this._setStrokeColor(val);\n  }\n});\n\n/**\n * Get previous stroke style.\n *\n * @return {CanvasGradient|String}\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('strokeStyle', function(){\n  return this.lastStrokeStyle || this.strokeColor;\n});\n\n/**\n * Register `font` for usage.\n *\n * @param {Font} font\n * @api public\n */\n\nContext2d.prototype.addFont = function(font) {\n  this._fonts = this._fonts || {};\n  if (this._fonts[font.name]) return;\n  this._fonts[font.name] = font;\n};\n\n/**\n * Set font.\n *\n * @see exports.parseFont()\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('font', function(val){\n  if (!val) return;\n  if ('string' == typeof val) {\n    var font;\n    if (font = parseFont(val)) {\n      this.lastFontString = val;\n\n      var fonts = this._fonts;\n      if (fonts && fonts[font.family]) {\n        var fontObj = fonts[font.family];\n        var type = font.weight + '-' + font.style;\n\n        var fontFace = fontObj.getFace(type);\n        this._setFontFace(fontFace, font.size);\n      } else {\n        this._setFont(\n            font.weight\n          , font.style\n          , font.size\n          , font.unit\n          , font.family);\n      }\n    }\n  }\n});\n\n/**\n * Get the current font.\n *\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('font', function(){\n  return this.lastFontString || '10px sans-serif';\n});\n\n/**\n * Set text baseline.\n *\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('textBaseline', function(val){\n  if (!val) return;\n  var n = baselines.indexOf(val);\n  if (~n) {\n    this.lastBaseline = val;\n    this._setTextBaseline(n);\n  }\n});\n\n/**\n * Get the current baseline setting.\n *\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('textBaseline', function(){\n  return this.lastBaseline || 'alphabetic';\n});\n\n/**\n * Set text alignment.\n *\n * @api public\n */\n\nContext2d.prototype.__defineSetter__('textAlign', function(val){\n  switch (val) {\n    case 'center':\n      this._setTextAlignment(0);\n      this.lastTextAlignment = val;\n      break;\n    case 'left':\n    case 'start':\n      this._setTextAlignment(-1);\n      this.lastTextAlignment = val;\n      break;\n    case 'right':\n    case 'end':\n      this._setTextAlignment(1);\n      this.lastTextAlignment = val;\n      break;\n  }\n});\n\n/**\n * Get the current font.\n *\n * @see exports.parseFont()\n * @api public\n */\n\nContext2d.prototype.__defineGetter__('textAlign', function(){\n  return this.lastTextAlignment || 'start';\n});\n\n/**\n * Create `ImageData` with the given dimensions or\n * `ImageData` instance for dimensions.\n *\n * @param {Number|ImageData} width\n * @param {Number} height\n * @return {ImageData}\n * @api public\n */\n\nContext2d.prototype.createImageData = function(width, height){\n  if ('ImageData' == width.constructor.name) {\n    height = width.height;\n    width = width.width;\n  }\n  return new ImageData(new Uint8ClampedArray(width * height * 4), width, height);\n};\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/image.js":"'use strict';\n\n/*!\n * Canvas - Image\n * Copyright (c) 2010 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Canvas = require('./bindings')\n  , Image = Canvas.Image;\n\n/**\n * Src setter.\n *\n *  - convert data uri to `Buffer`\n *\n * @param {String|Buffer} val filename, buffer, data uri\n * @api public\n */\n\nImage.prototype.__defineSetter__('src', function(val){\n  if ('string' == typeof val && 0 == val.indexOf('data:')) {\n    val = val.slice(val.indexOf(',') + 1);\n    this.source = new Buffer(val, 'base64');\n  } else {\n    this.source = val;\n  }\n});\n\n/**\n * Src getter.\n *\n * TODO: return buffer\n *\n * @api public\n */\n\nImage.prototype.__defineGetter__('src', function(){\n  return this.source;\n});\n\n/**\n * Inspect image.\n *\n * TODO: indicate that the .src was a buffer, data uri etc\n *\n * @return {String}\n * @api public\n */\n\nImage.prototype.inspect = function(){\n  return '[Image'\n    + (this.complete ? ':' + this.width + 'x' + this.height : '')\n    + (this.src ? ' ' + this.src : '')\n    + (this.complete ? ' complete' : '')\n    + ']';\n};\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/jpegstream.js":"'use strict';\n\n/*!\n * Canvas - JPEGStream\n * Copyright (c) 2010 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Stream = require('stream').Stream;\n\n/**\n * Initialize a `JPEGStream` with the given `canvas`.\n *\n * \"data\" events are emitted with `Buffer` chunks, once complete the\n * \"end\" event is emitted. The following example will stream to a file\n * named \"./my.jpeg\".\n *\n *     var out = fs.createWriteStream(__dirname + '/my.jpeg')\n *       , stream = canvas.createJPEGStream();\n *\n *     stream.pipe(out);\n *\n * @param {Canvas} canvas\n * @param {Boolean} sync\n * @api public\n */\n\nvar JPEGStream = module.exports = function JPEGStream(canvas, options, sync) {\n  var self = this\n    , method = sync\n      ? 'streamJPEGSync'\n      : 'streamJPEG';\n  this.options = options;\n  this.sync = sync;\n  this.canvas = canvas;\n  this.readable = true;\n  // TODO: implement async\n  if ('streamJPEG' == method) method = 'streamJPEGSync';\n  process.nextTick(function(){\n    canvas[method](options.bufsize, options.quality, options.progressive, function(err, chunk){\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n      } else if (chunk) {\n        self.emit('data', chunk);\n      } else {\n        self.emit('end');\n        self.readable = false;\n      }\n    });\n  });\n};\n\n/**\n * Inherit from `EventEmitter`.\n */\n\nJPEGStream.prototype.__proto__ = Stream.prototype;\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/pdfstream.js":"'use strict';\n\n/*!\n * Canvas - PDFStream\n */\n\n/**\n * Module dependencies.\n */\n\nvar Stream = require('stream').Stream;\n\n/**\n * Initialize a `PDFStream` with the given `canvas`.\n *\n * \"data\" events are emitted with `Buffer` chunks, once complete the\n * \"end\" event is emitted. The following example will stream to a file\n * named \"./my.pdf\".\n *\n *     var out = fs.createWriteStream(__dirname + '/my.pdf')\n *       , stream = canvas.createPDFStream();\n *\n *     stream.pipe(out);\n *\n * @param {Canvas} canvas\n * @param {Boolean} sync\n * @api public\n */\n\nvar PDFStream = module.exports = function PDFStream(canvas, sync) {\n  var self = this\n    , method = sync\n      ? 'streamPDFSync'\n      : 'streamPDF';\n  this.sync = sync;\n  this.canvas = canvas;\n  this.readable = true;\n  // TODO: implement async\n  if ('streamPDF' == method) method = 'streamPDFSync';\n  process.nextTick(function(){\n    canvas[method](function(err, chunk, len){\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n      } else if (len) {\n        self.emit('data', chunk, len);\n      } else {\n        self.emit('end');\n        self.readable = false;\n      }\n    });\n  });\n};\n\n/**\n * Inherit from `EventEmitter`.\n */\n\nPDFStream.prototype.__proto__ = Stream.prototype;\n","/home/travis/build/npmtest/node-npmtest-canvas/node_modules/canvas/lib/pngstream.js":"'use strict';\n\n/*!\n * Canvas - PNGStream\n * Copyright (c) 2010 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Stream = require('stream').Stream;\n\n/**\n * Initialize a `PNGStream` with the given `canvas`.\n *\n * \"data\" events are emitted with `Buffer` chunks, once complete the\n * \"end\" event is emitted. The following example will stream to a file\n * named \"./my.png\".\n *\n *     var out = fs.createWriteStream(__dirname + '/my.png')\n *       , stream = canvas.createPNGStream();\n *\n *     stream.pipe(out);\n *\n * @param {Canvas} canvas\n * @param {Boolean} sync\n * @api public\n */\n\nvar PNGStream = module.exports = function PNGStream(canvas, sync) {\n  var self = this\n    , method = sync\n      ? 'streamPNGSync'\n      : 'streamPNG';\n  this.sync = sync;\n  this.canvas = canvas;\n  this.readable = true;\n  // TODO: implement async\n  if ('streamPNG' == method) method = 'streamPNGSync';\n  process.nextTick(function(){\n    canvas[method](function(err, chunk, len){\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n      } else if (len) {\n        self.emit('data', chunk, len);\n      } else {\n        self.emit('end');\n        self.readable = false;\n      }\n    });\n  });\n};\n\n/**\n * Inherit from `EventEmitter`.\n */\n\nPNGStream.prototype.__proto__ = Stream.prototype;\n"}